(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{272:function(t,n,e){"use strict";e.r(n);var a=e(0),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"两种绑定方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两种绑定方式"}},[t._v("#")]),t._v(" 两种绑定方式")]),t._v(" "),e("pre",[e("code",[t._v("(DOM0)1.obj.onclick = fn;\t\n\t\n(DOM2)2.\n  ie:obj.attachEvent(事件名称，事件函数);\n\t1.没有捕获(非标准的ie 标准的ie底下有  ie6到10)\n\t2.事件名称有on\n\t3.事件函数执行的顺序：标准ie-》正序   非标准ie-》倒序\n\t4.this指向window\n      标准:obj.addEventListener(事件名称，事件函数，是否捕获);\n\t1.有捕获\n\t2.事件名称没有on\n\t3.事件执行的顺序是正序\n\t4.this触发该事件的对象\n\t\n\t\n\tdocument.attachEvent('onclick', fn2);\n\tdocument.attachEvent('onclick', function() {\n\t\tfn1.call(document);\n\t});\n\t\n\t是否捕获 : 默认是false    false:冒泡 true：捕获\n\t\n\tdocument.addEventListener('click', fn1, false);\n\tdocument.addEventListener('click', fn2, false);\n\t\t\n注意\n\tie代表了:非标准ie 和 标准ie\n\t标准代表了:标准ie 和 chrome Firefox等....\n")])]),t._v(" "),e("h3",{attrs:{id:"同步this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步this"}},[t._v("#")]),t._v(" 同步this")]),t._v(" "),e("pre",[e("code",[t._v("function bind(obj, evname, fn) {\n\tif (obj.addEventListener) {//除ie低版本外都可以进入\n\t\tobj.addEventListener(evname, fn, false);\n\t} else {\n\t\tobj.attachEvent('on' + evname, function() {\n\t\t\tfn.call(obj);\n\t\t});\n\t}\n}\n\nbind(document, 'click', fn1);\n")])]),t._v(" "),e("h3",{attrs:{id:"两种绑定方式的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两种绑定方式的区别"}},[t._v("#")]),t._v(" 两种绑定方式的区别")]),t._v(" "),e("pre",[e("code",[t._v("取消冒泡的手段:event.cancelBubble = true;\n\t   \t    event.stopPropagation();\n\n第一种:默认冒泡,\n第一种:一个元素上只能绑定一个同类事件,如果继续绑定的话,第二个事件函数会覆盖第一个\n\n\n第二种: \n\t  attachEvent\n\t  \t\t\t       默认冒泡\n\t  addEventListener    \n\t\t\t\t      是否捕获 : 默认是false    \n\t\t\t\t      第三个参数: false:冒泡\n\t\t\t\t\t\t    true：捕获\n第二种:一个元素上可以绑定多个同类事件,它们都会被执行\n")])]),t._v(" "),e("h3",{attrs:{id:"事件解绑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件解绑"}},[t._v("#")]),t._v(" 事件解绑")]),t._v(" "),e("pre",[e("code",[t._v('DOM0:想解除事件就相当简单了，只需要再注册一次事件，把值设成null\n\t\t原理就是最后注册的事件要覆盖之前的，最后一次注册事件设置成null，\n\t\t\t也就解除了事件绑定。\n\t\t\t\nDOM0事件模型还涉及到直接写在html中的事件:\n\t\t因此不会传入event对象，同时，this指向的是window，不再是触发事件的dom对象。\n\t\t\nDOM2:removeEventListener\n\t \t解除事件语法：btn.removeEventListener("事件名称", "事件回调", "捕获/冒泡");\n\t detachEvent(ie)\n')])]),t._v(" "),e("h3",{attrs:{id:"事件流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件流"}},[t._v("#")]),t._v(" 事件流")]),t._v(" "),e("pre",[e("code",[t._v("单击蓝色框后，开始事件捕获阶段：\n\t从最外层的document对象（浏览器其实是从window对象开始的）向内捕获事件，路过红色框时，查看到红色框有事件，\n\t但是红色框说：“我是在冒泡阶段执行，现在是捕获阶段，等你回来再说吧。”\n\t接下来是黄色框：“我在捕获阶段执行，就是现在执行！在控制台输“黄色框”吧~~”\n接下来到达目标阶段：\n\t“DOM2级事件”规范要求捕获阶段不会涉及事件目标即我们点击的那个最具体的元素，\n\t但IE9、Chrome等浏览器都会在捕获阶段触发事件对象上的事件。执行目标对象的事件函数，控制台输出“蓝色框”。\n最后是冒泡阶段：\n\t由目标对象向外传递，到达黄色框，黄色框说：“我在捕获阶段执行过了，你走吧...”\n\t然后到达红色框，红色框说：“你终于回来了，现在就执行我的事件！”控制台输出“红色框”。\n\t然后继续向外传播，直到到达document对象后停止。\n其他：更改了元素绑定事件代码的顺序，执行顺序也和上面表现的一致。\n")])]),t._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("pre",[e("code",[t._v("onclick形式:冒泡\nattachEvent:冒泡\naddEventListener:第三个参数(false:冒泡;true:捕获)")])])])}),[],!1,null,null,null);n.default=s.exports}}]);