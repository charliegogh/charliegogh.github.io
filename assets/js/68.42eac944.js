(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{291:function(t,n,e){"use strict";e.r(n);var d=e(0),i=Object(d.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[this._v("#")]),this._v(" DOM")]),this._v(" "),n("pre",[n("code",[this._v('1. 节点及其类型:\n\t1). 元素节点\n\t2). 属性节点: 元素的属性, 可以直接通过属性的方式来操作. \n\t3). 文本节点: 是元素节点的子节点, 其内容为文本. \n\t4).\tdocumnet\n\t\n2. 在 html 文档的什么位置编写 js 代码?\n\t\n\t0). 直接在 html 页面中书写代码.\n\t\t<button id="button" onclick="alert(\'hello world\');">Click Me!</button>\n\t\t缺点: \n\t\t\t①. js 和 html 强耦合, 不利用代码的维护\n\t\t\t②. 若 click 相应函数是比较复杂的, 则需要先定义一个函数, 然后再在 onclick 属性中完成对函数的引用, 比较麻烦\n\n\t1). 一般地, 不能在 body 节点之前来直接获取 body 内的节点, 因为此时 html 文档树还没有加载完成, \n\t    获取不到指定的节点:\n\t\n\t<head>\n\t\t<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n\t\t<title>Untitled Document</title>\n\t\t<script type="text/javascript">\n\t\t\tvar cityNode = document.getElementById("city");\n\t\t\t//打印结果为 null.\n\t\t\talert(cityNode);\n\t\t<\/script>\n\t</head>\n\t<body>\n\t......\n\t\n\t2). 可以在整个 html 文档的最后编写类似代码, 但这不符合习惯\n\t\n\t3). 一般地, 在 body 节点之前编写 js 代码, 但需要利用 window.onload 事件,　\n\t    该事件在当前文档完全加载之后被触发, 所以其中的代码可以获取到当前文档的任何节点.\n\t    \n\t    <head>\n\t\t\t<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n\t\t\t<title>Untitled Document</title>\n\t\t\t<script type="text/javascript">\n\t\t\t\twindow.onload = function(){\n\t\t\t\t\tvar cityNode = document.getElementById("city");\n\t\t\t\t\talert(cityNode);\n\t\t\t\t};\n\t\t\t<\/script>\n\t\t</head>\n\t\t<body>\n\t\t......\n\n3. 如何来获取元素节点:\n\n\t1). **document.getElementById: 根据 id 属性获取对应的单个节点\n\n\t2). **document.getElementsByTagName: \n\t\t\t根据标签名获取指定节点名字的数组, 数组对象 length 属性可以获取数组的长度\n\n\t3). document.getElementsByName: \n\t\t根据节点的 name 属性获取符合条件的节点数组, \n\t\t但 ie 的实现方式和 W3C 标准有差别: \n\t\t在 html 文档中若某节点(li)没有 name 属性,　\n\t\t则 ie 使用 getElementsByName 不能获取到节点数组, 但火狐可以. \n\n\t4). 其它的两个方法,　ie 根本就不支持, 所以不建议使用  \n\t\tdocument.getElementsByClassName();\n\t\tdocument.getElementsByTagNameNS();\n\t\n4. 获取属性节点:\n\t1). **可以直接通过 cityNode.id 这样的方式来获取和设置属性节点的值\n\t\n\t2). **可以直接通过getAttribute/setAttribute/removeAttribute\n\t\t\t\t 这样的方式来获取和设置属性节点的值\n\n\t3). 通过元素节点的 getAttributeNode 方法来获取属性节点,\n\t         然后在通过 nodeValue 来读写属性值 \n\t\n5. 获取元素节点的子节点(**只有元素节点才有子节点!!):\n\t1). childNodes 属性获取全部的子节点, 但该方法不实用. 因为如果要获取指定的节点\n\t的指定子节点的集合, 可以直接调用元素节点的 getElementsByTagName() 方法来获取. \n\t2). firstChild 属性获取第一个子节点\n\t3). lastChild  属性获取最后一个子节点\t\n\t\n\t\n\t\t获取指定节点的所有子节点.一共有三种方式:\n\t\t\t\tchildNodes属性:\n\t\t\t\t\t\t不实用,会取到文本节点\n\t\t\t\t\tchildren属性: \n\t\t\t\t\t\t实用,会剔除文本节点\n\t\t\t\t用该指定节点的getElementsByTagName方法(注意不是document):\t\n\t\t\t\t\t\t不实用,虽然会剔除文本节点,但只能取一组相同tagNaem的子节点,无法取全\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t使用firstChild,lastChild来取一个指定元素节点的第一个和最后一个子节点时\n\t\t\t\t\t\t1.会受到文本子节点的影响\n\t\t\t\t\t\t2.我们通常可以使用firstChild的nodeValue属性来获取文本值(当子节点只有文本节点时)\n\t\t\t\n\t\n6. 获取文本节点:\n\t1). 步骤: 元素节点 --\x3e 获取元素节点的子节点\n\t2). 若元素节点只有文本节点一个子节点, \n\t例如 <li id="bj" name="BeiJing">北京</li>, <p>你喜欢哪个城市?</p>, \n\t可以先获取到指定的元素节点 eleNode, \n\t然后利用 eleNode.firstChild.nodeValue 的方法来读写其文本节点的值\t\t\n\n\n\n7. 节点的属性:\n\t1). nodeName: 代表当前节点的名字. 只读属性. \n\t**如果给定节点是一个文本节点, nodeName 属性将返回内容为 #text 的字符串\n\t2). nodeType：返回一个整数, 这个数值代表着给定节点的类型. \n\t只读属性. 1 -- 元素节点, 2 -- 属性节点, 3 -- 文本节点\n    3). nodeValue：返回给定节点的当前值(字符串). 可读写的属性\n\t\t①. 元素节点, 返回值是 null.\n\t\t②. 属性节点: 返回值是这个属性的值\n\t\t③. 文本节点: 返回值是这个文本节点的内容\t\n\t\t\n\t    \n8. 创建一个元素节点:\n\t1). createElement(): 按照给定的标签名创建一个新的元素节点. 方法只有一个参数：被创建的元素节点的名字, 是一个字符串.\n\t                     方法的返回值：是一个指向新建节点的引用指针. 返回值是一个元素节点, 所以它的 nodeType 属性值等于 1.\n                           **新元素节点不会自动添加到文档里, 它只是一个存在于 JavaScript 上下文的对象.\n                         \n9. 创建一个文本节点:\n\t1). createTextNode(): 创建一个包含着给定文本的新文本节点. 这个方法的返回值是一个指向新建文本节点引用指针. 它是一个文本节点, 所以它的 nodeType 属性等于 3.\n\t                         方法只有一个参数：新建文本节点所包含的文本字符串. 新元素节点不会自动添加到文档里\n\t                         \n10. 为元素节点添加子节点:\n\t1). appendChild(): var reference = element.appendChild(newChild): 给定子节点 newChild 将成为给定元素节点 element 的最后一个子节点.\n\t                      方法的返回值是一个指向新增子节点的引用指针.\t\t    \n\t                      \n11. 节点的替换:\n\t1). replaceChild(): 把一个给定父元素里的一个子节点替换为另外一个子节点\n\t\t\tvar reference = element.replaceChild(newChild,oldChild);\n\t\t\t返回值是一个指向已被替换的那个子节点的引用指针\n\t2). 该节点除了替换功能以外还有移动的功能.  \n\t3). 该方法只能完成单向替换, 若需要使用双向替换, 需要自定义函数:\n\t/**\n\t * 互换 aNode 和 bNode\n\t * @param {Object} aNode\n\t * @param {Object} bNode\n\t */\n\tfunction replaceEach(aNode, bNode){\n\t\t\n\t\tif(aNode == bNode){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar aParentNode = aNode.parentNode;\n\t\t//若 aNode 有父节点\n\t\tif(aParentNode){\n\t\t\tvar bParentNode = bNode.parentNode;\n\t\t\t\n\t\t\t//若 bNode 有父节点\t\n\t\t\tif(bParentNode){\n\t\t\t\tvar tempNode = aNode.cloneNode(true);\n\t\t\t\tbParentNode.replaceChild(tempNode, bNode);\n\t\t\t\taParentNode.replaceChild(bNode, aNode);\t\n\t\t\t}\n\t\t}\n\n\t}   \n\t\n12. 插入节点:\n\t1). insertBefore(): 把一个给定节点插入到一个给定元素节点的给定子节点的前面\n  \t\t\tvar reference =  element.insertBefore(newNode,targetNode);\n         节点 newNode 将被插入到元素节点 element 中并出现在节点 targetNode 的前面. 节点 targetNode 必须是 element 元素的一个子节点。\t \n\n    2). 自定义 insertAfter() 方法     \n       /**\n\t * 将 newChild 插入到 refChild 的后边\n\t * @param {Object} newChild\n\t * @param {Object} refChild\n\t */\n\tfunction insertAfter(newChild, refChild){\n\t\tvar refParentNode = refChild.parentNode;\n\t\t\n\t\t//判断 refChild 是否存在父节点\n\t\tif(refParentNode){\n\t\t\t//判断 refChild 节点是否为其父节点的最后一个子节点\n\t\t\tif(refChild == refParentNode.lastChild){\n\t\t\t\trefParentNode.appendChild(newChild);\n\t\t\t}else{\n\t\t\t\trefParentNode.insertBefore(newChild, refChild.nextSibling);\n\t\t\t}\t\n\t\t}\n\t}\n    \n    \n13. 删除节点:\n\t1). removeChild(): 从一个给定元素里删除一个子节点\n   \t\t\tvar reference = element.removeChild(node);\n\t\t返回值是一个指向已被删除的子节点的引用指针. 某个节点被 removeChild() 方法删除时, 这个节点所包含的所有子节点将同时被删除. \n\t\t如果想删除某个节点, 但不知道它的父节点是哪一个, parentNode 属性可以帮忙。    \n\t\t\n14. innerHTML属性:\n\t1). 浏览器几乎都支持该属性, 但不是 DOM 标准的组成部分. innerHTML 属性可以用来读, 写某给定元素里的 HTML 内容\t\n\t\n15. 其它属性, 参看 API: nsextSibling, \tpreviousSibling 等\t           \n')])])])}),[],!1,null,null,null);n.default=i.exports}}]);