(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{267:function(a,e,r){"use strict";r.r(e);var t=r(0),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h3",{attrs:{id:"js数组操作常见"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js数组操作常见"}},[a._v("#")]),a._v(" js数组操作常见")]),a._v(" "),r("h4",{attrs:{id:"替换数组中元素值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#替换数组中元素值"}},[a._v("#")]),a._v(" 替换数组中元素值")]),a._v(" "),r("h4",{attrs:{id:"reduce"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce()")]),a._v(" "),r("blockquote",[r("p",[a._v("计算数组元素相加之后的总和")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("/**\n * @param total 初始值或者为返回的值\n * @param num 当前元素\n * @param currentIndex 当前元素的索引值\n * @param arr\n * @returns {*}\n */\nfunction getNum(total,num,currentIndex,arr) {\n    return total+num\n}\narr.reduce(getNum)\n\n")])])]),r("h4",{attrs:{id:"indexof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#indexof"}},[a._v("#")]),a._v(" indexOf()")]),a._v(" "),r("blockquote",[r("p",[a._v("返回找到第一个元素的索引 如果没有找到返回-1")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("a=[0,1,2,3]\nconsole.log(a.indexOf(1));\n")])])]),r("h4",{attrs:{id:"every"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#every"}},[a._v("#")]),a._v(" every()")]),a._v(" "),r("p",[r("a",{attrs:{href:"http://www.runoob.com/jsref/jsref-every.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("用法"),r("OutboundLink")],1)]),a._v(" "),r("h4",{attrs:{id:"splice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#splice"}},[a._v("#")]),a._v(" splice()")]),a._v(" "),r("blockquote",[r("p",[a._v("删除或替换现有元素来修改数组,并以数组形式返回被修改的内容")])]),a._v(" "),r("h4",{attrs:{id:"findindex-和find-【es6】"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#findindex-和find-【es6】"}},[a._v("#")]),a._v(" findIndex()和find() 【es6】")]),a._v(" "),r("p",[a._v("find()用来查找目标元素，找到就返回该元素，找不到返回undefined。")]),a._v(" "),r("p",[a._v("findIndex()查看目标元素，找到返回该元素的位置，找不到就返回-1。")]),a._v(" "),r("blockquote",[r("p",[a._v("使用：快速删除数组中的某个值")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("// 删除数组中id为1的元素\nlet arr = [\n    {id:1,value:2},\n    {id:2,value:3}\n]\narr.splice(arr.findIndex(item=>item.id===2),1)\nconsole.log(arr);\narr=arr.filter(({id})=>id!==2) \n")])])]),r("h4",{attrs:{id:"unshift"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unshift"}},[a._v("#")]),a._v(" unshift")]),a._v(" "),r("blockquote",[r("p",[a._v("向数组的开头添加一个或者更多元素")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("let arr=[\n    {\n        name:'charlie'\n    },{\n    name:'errol'\n    }\n]\narr.unshift({name:'asd'})\nconsole.log(arr);\n")])])]),r("p",[r("strong",[a._v("引申：和shift之间的区别是啥子")])]),a._v(" "),r("h4",{attrs:{id:"向数组中添加元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#向数组中添加元素"}},[a._v("#")]),a._v(" 向数组中添加元素")]),a._v(" "),r("blockquote",[r("p",[a._v("for-of")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("for(item in arr){\n    return item.index=-1\n}\n")])])]),r("h4",{attrs:{id:"map-映射，基本用法和foreach-类似"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#map-映射，基本用法和foreach-类似"}},[a._v("#")]),a._v(" map 映射，基本用法和forEach()类似")]),a._v(" "),r("blockquote",[r("p",[a._v("将原来的数组映射成新的数组")])]),a._v(" "),r("h4",{attrs:{id:"将数组转化成键值对的形式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#将数组转化成键值对的形式"}},[a._v("#")]),a._v(" 将数组转化成键值对的形式")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('// es6 map实现\nlet arr=[ {name:"soina",value:\'122\'},\n    {name:"amy",value:\'123\'},\n    {name:"foina",value:\'124\'}]\nlet obj={}\narr.map((e,item)=>{\nobj[e.name]=e\n})\nconsole.log(obj);\n\n// jquery\n/*\nvar formArr2=[\n\n    {name:"soina",value:\'122\'},\n    {name:"amy",value:\'123\'},\n    {name:"foina",value:\'124\'},\n];\n\nvar obj2={}; //定义一个空对象\n$.each(formArr2,function(item, e) {\n\n    obj2[e.name]=e.value;\n});\nconsole.log(obj2); //{soina: "122", amy: "123", foina: "124"}\n*/\n\n// for in 循环实现\nvar formArr3=[\n\n    {name:"soina",value:\'122\'},\n    {name:"amy",value:\'123\'},\n    {name:"foina",value:\'124\'},\n];\n\nvar obj3={}; //定义一个空对象\nfor(var item in formArr3 ){\n\n    obj3[formArr3[item].name]=formArr3[item].value;\n}\nconsole.log(obj3);\n')])])]),r("h4",{attrs:{id:"判断数组是否为空"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#判断数组是否为空"}},[a._v("#")]),a._v(" 判断数组是否为空")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("const arr = [];\nconst flag = Array.isArray(arr) && !arr.length;\n// flag => true\n")])])]),r("h4",{attrs:{id:"验证是否为数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#验证是否为数组"}},[a._v("#")]),a._v(" 验证是否为数组")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("Array.isArray(obj); // its a new Array method\n")])])]),r("h4",{attrs:{id:"获取数组中的最大值和最小值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#获取数组中的最大值和最小值"}},[a._v("#")]),a._v(" 获取数组中的最大值和最小值")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; \nvar maxInNumbers = Math.max.apply(Math, numbers); \nvar minInNumbers = Math.min.apply(Math, numbers);\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);